import numpy as np

# Sigmoid Activation Function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Derivative of Sigmoid
def sigmoid_derivative(x):
    return x * (1 - x)

# EX-OR Dataset
inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
outputs = np.array([[0], [1], [1], [0]])

# Set random seed for reproducibility
np.random.seed(42)

# Initialize weights for input to hidden layer (2x2) and hidden to output layer (2x1)
input_layer_neurons = inputs.shape[1]   # Number of input neurons (2 for EX-OR)
hidden_layer_neurons = 2                # Number of neurons in hidden layer
output_neurons = 1                      # Output layer neuron (1 for binary classification)

# Randomly initialize weights
weights_input_hidden = np.random.uniform(size=(input_layer_neurons, hidden_layer_neurons))
weights_hidden_output = np.random.uniform(size=(hidden_layer_neurons, output_neurons))

# Learning rate
learning_rate = 0.5

# Number of iterations for training
epochs = 10000

# Training process
for epoch in range(epochs):
    # Forward Propagation
    hidden_layer_input = np.dot(inputs, weights_input_hidden)
    hidden_layer_output = sigmoid(hidden_layer_input)

    final_input = np.dot(hidden_layer_output, weights_hidden_output)
    predicted_output = sigmoid(final_input)

    # Compute Error (Binary Cross Entropy Loss)
    error = outputs - predicted_output

    # Backpropagation
    d_predicted_output = error * sigmoid_derivative(predicted_output)

    error_hidden_layer = d_predicted_output.dot(weights_hidden_output.T)
    d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_layer_output)

    # Updating weights
    weights_hidden_output += hidden_layer_output.T.dot(d_predicted_output) * learning_rate
    weights_input_hidden += inputs.T.dot(d_hidden_layer) * learning_rate

    # Print error every 1000 epochs
    if epoch % 1000 == 0:
        print(f'Epoch {epoch}, Error: {np.mean(np.abs(error))}')

# Testing the network
print("\nFinal weights after training:")
print("Weights between Input and Hidden Layer: \n", weights_input_hidden)
print("Weights between Hidden and Output Layer: \n", weights_hidden_output)

# Test the trained network
print("\nPredicted Output after training:")
print(predicted_output)
